location /rest/schema.json {
    default_type  application/json;
    access_by_lua_block {
        if ngx.var.development ~= '1' then
            ngx.exit(ngx.HTTP_FORBIDDEN)
        end
    }

    content_by_lua_block {
        local sub0 = require 'sub0'
        ngx.say(sub0.get_json_schema())
    }
}

location /rest/schema_internal.json {
    default_type  application/json;
    internal;
    content_by_lua_block {
        local sub0 = require 'sub0'
        ngx.say(sub0.execute_instrospection_sql())
    }
}

location /rest/ {
    default_type  application/json;
    internal;
    proxy_hide_header Content-Location;
    add_header Content-Location  $rest_prefix$upstream_http_content_location;
    
    rewrite_by_lua_block {
        local sub0 = require 'sub0'
        local cache = sub0.cache
        
        cache.compute_cache_key()

        if ngx.ctx.custom_headers then
            for h, v in pairs(ngx.ctx.custom_headers) do
                ngx.req.set_header(h, v) --# try not to ovewrite Prefer header, but add to it
            end
        end   
    }

    # Cache with nginx internals
    set $cache_key '';
    set $cache_ttl '';
    proxy_cache api_cache;
    proxy_ignore_headers "Expires" "Cache-Control";
    # proxy_cache_valid $cache_ttl_str;
    header_filter_by_lua_block {
        local method = ngx.var.echo_request_method
        local sub0 = require 'sub0'
        local cache = sub0.cache

        cache.cache_request()

        if method == 'POST' or method == 'PATCH' or method == 'DELETE' then
            cache.invalidate_cache_tags()
        end
    }
    proxy_cache_key $cache_key;
    proxy_cache_bypass $cache_bypass;
    #proxy_cache_bypass "1";
    # Debug Info
    if ($development = "1") {
        more_set_headers 'Cache-Engine: "nginx"';
        more_set_headers 'Cache-Status: $upstream_cache_status';
        more_set_headers 'Cache-Key: $cache_key';
        more_set_headers 'Cache-TTL: $cache_ttl';
        more_set_headers 'Method: $echo_request_method';
        add_header Request-Time $request_time;
    }

    # Cache with redis
    # set $key $cache_key;
    # set_escape_uri $escaped_key $key;
    # srcache_fetch GET /redisget $key;
    # srcache_store PUT /redisput key=$escaped_key&exptime=$cache_ttl;
    # # Debug Info
    # if ($request_method = GET) {
    #     add_header Cache-Engine "redis";
    #     add_header Cache-Status $srcache_fetch_status;
    #     add_header Cache-Key $cache_key;
    #     add_header Cache-TTL $cache_ttl;
    # }
    

    
    #if it's a mutation request, invalidate the appropriate tags
    # log_by_lua_block {
    #     local method = ngx.var.request_method
    #     local sub0 = require 'sub0'
    #     local cache = sub0.cache
    #     if method == 'POST' or method == 'PATCH' or method == 'DELETE' then
    #         --# TODO! this fails when the backend is Redis (capture API disabled in the context of ngx.timer)
    #         --# solutions would be to use a pure lua http client or move this out of log_by_lua_block

    #         ngx.timer.at(0, function(premature) cache.invalidate_cache_tags() end)
    #     end
    # }

    
    # hardcoded JWT authentications
    # {
    #   "role": "administrator",
    #   "user_id": 1,
    #   "company_id": 1
    # }
    # eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYWRtaW5pc3RyYXRvciIsInVzZXJfaWQiOjEsImNvbXBhbnlfaWQiOjF9.ate5mETtGRu-mfGF4jFt7pP1b4W85r2uEXt603D7obc
    proxy_set_header  Accept-Encoding  ""; #force postgrest not to gzip the output
    #proxy_set_header  Authorization "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYWRtaW5pc3RyYXRvciIsInVzZXJfaWQiOjEsImNvbXBhbnlfaWQiOjF9.ate5mETtGRu-mfGF4jFt7pP1b4W85r2uEXt603D7obc";
    proxy_pass http://postgrest/; # Reverse proxy to your PostgREST
}
